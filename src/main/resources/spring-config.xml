<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--包扫描，切面自动代理，注解自动生成Bean支持,引用数据库属性-->
    <context:component-scan base-package="com.vvicey"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <context:annotation-config/>
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--扫描数据源，mapper的xml地址-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:com/vvicey/**/**.xml"/>
    </bean>
    <!--扫描mapper接口，与mapper扫描相链接-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.vvicey.**.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--声明事物管理为采用注解方式即@xxx-->
    <tx:annotation-driven/>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--数据库设置-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
        <property name="defaultAutoCommit" value="true"/>
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="filters" value="stat"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800s -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abandoned链接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>

    <!--&lt;!&ndash; quartz配置 &ndash;&gt;-->
    <!--<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--&lt;!&ndash; 可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 &ndash;&gt;-->
        <!--<property name="overwriteExistingJobs" value="true"/>-->
        <!--&lt;!&ndash; 必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 &ndash;&gt;-->
        <!--<property name="startupDelay" value="3"/>-->
        <!--&lt;!&ndash; 把spring上下 文以key/value的方式存放在了quartz的上下文中了 &ndash;&gt;-->
        <!--<property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>-->
        <!--&lt;!&ndash; 设置自动启动 &ndash;&gt;-->
        <!--<property name="autoStartup" value="true"/>-->
        <!--<property name="quartzProperties">-->
            <!--<props>-->
                <!--<prop key="org.quartz.scheduler.instanceName">scheduler</prop>-->
                <!--<prop key="org.quartz.scheduler.instanceId">AUTO</prop>-->
                <!--<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>-->
                <!--<prop key="org.quartz.threadPool.threadCount">3</prop>-->
                <!--<prop key="org.quartz.threadPool.threadPriority">5</prop>-->
                <!--<prop key="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread">true</prop>-->
                <!--<prop key="org.quartz.jobStore.misfireThreshold">60000</prop>-->
                <!--<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>-->
                <!--<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>-->
                <!--<prop key="org.quartz.jobStore.isClustered">false</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->



    <!-- activity工作流流程引擎配置项 -->
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <!--数据源 和系统同一个-->
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <!--更新数据库表 如果没有 则创建-->
        <property name="databaseSchemaUpdate" value="true"/>
        <!-- 是否启动jobExecutor -->
        <property name="jobExecutorActivate" value="false"/>
        <property name="activityFontName" value="宋体"/>
        <property name="labelFontName" value="宋体"/>
        <!--自动部署流程-->
        <property name="deploymentResources">
            <list>
                <value>classpath*:workflow/*.bpmn</value>
            </list>
        </property>
    </bean>
    <!--流程引擎-->
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
    </bean>
    <!-- 工作流数据存储服务 -->
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <!-- 工作流运行时服务 -->
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <!--  工作流任务服务-->
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <!--  工作流历史数据服务-->
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <!--  工作流管理服务-->
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
    <!-- 工作流身份识别服务 -->
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>

    <!-- 导入shiro配置文件 -->
    <import resource="spring-shiro.xml"/>
</beans>